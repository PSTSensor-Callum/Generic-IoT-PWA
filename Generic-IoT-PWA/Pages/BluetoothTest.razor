@page "/bluetooth"

<h3>Blazor Web Bluetooth API tester</h3>

<div>

    @if (AdvertisementsFeatureDissabled)
    {
        <p>Please make sure to enable "Web BLE new permissions backend" feature for bluetooth to have advertisements!</p>
        <p>(Copy ref to search field)</p>
        <p>about:flags/#enable-web-bluetooth-new-permissions-backend</p>
    }

    @if (BluetoothAdvertisingEvent != null)
    {
        <h4>Advertisement:</h4>
        <p>Apperience:       @BluetoothAdvertisingEvent.Appearance</p>
        <p>Device:           @BluetoothAdvertisingEvent.Device</p>
        <p>ManufacturerData: </p>
        @if (@BluetoothAdvertisingEvent.ManufacturerData != null)
        {
            @foreach (var item in BluetoothAdvertisingEvent.ManufacturerData)
            {
                <p> - Key: @item.Key, Value: @item.Value</p>
            }
        }

        <p>Name:             @BluetoothAdvertisingEvent.Name</p>
        <p>Rssi:             @BluetoothAdvertisingEvent.Rssi</p>
        <p>Service_data:</p>
        @if (@BluetoothAdvertisingEvent.ServiceData != null)
        {
            @foreach (var item in BluetoothAdvertisingEvent.ServiceData)
            {
                <p> - Key: @item.Key, Value: @item.Value</p>
            }
        }
        <p>Tx_power:         @BluetoothAdvertisingEvent.TxPower</p>
        <p>UUIDs:</p>
        @if (@BluetoothAdvertisingEvent.Uuids != null)
        {
            @foreach (var item in BluetoothAdvertisingEvent.Uuids)
            {
                <p> - item</p>
            }
        }
    }
    else if (AdvertisementsReceiveActivated)
    {
        <p>Advertisements scanning....</p>
    }

    @if (RequestedDevices.Any())
    {
        <ul class="list-group">
            @foreach (var device in RequestedDevices)
            {

                <li class="list-group-item @(device.Gatt.Connected ? "active" : "")">
                    <div>
                        | @device.Name | @device.Id | @device.Gatt.Connected | <button type="button" @onclick="() => { IsBusy = true; device.Gatt.Disonnect(); IsBusy = false; StateHasChanged(); }"></button>
                    </div>

                </li>
            }
        </ul>
    }

    @if (CurrentDevice == null || !CurrentDevice.Gatt.Connected)
    {

        <div class="form-group">
            <button class="btn btn-outline-primary" @onclick="OnGetAvailabilityClicked" disabled="@IsBusy" type="button">Get availability of bluetooth adapter</button>

            @if (IsAvailable.HasValue)
            {
                <p>@(IsAvailable.Value ? "Bluetooth adapter available" : "Bluetooth adapter is not available")</p>
            }
        </div>

        <!--  Get devices-->
        <div class="form-group">
            <button class="btn btn-outline-primary" @onclick="OnGetDeviceClicked" disabled="@IsBusy" type="button">Get devices</button>

            @if (GotDevices.Any())
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th scope="col">#</th>
                            <th scope="col">Name</th>
                            <th scope="col">Id</th>
                            <th scope="col">Gatt.DeviceUuid</th>
                            <th scope="col">Gatt.Connected</th>
                            <th scope="col">Try to connect</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (var i = 0; i < GotDevices.Count; i++)
                        {
                            var device = GotDevices[i];
                            <tr>
                                <th scope="row">@i</th>
                                <td>@device.Name</td>
                                <td>@device.Id</td>
                                <td>@device.Gatt.DeviceUuid</td>
                                <td>@device.Gatt.Connected</td>
                                <td><button class="btn btn-outline-secondary" @onclick="() => ConnectDevice(device)" disabled="@IsBusy" type="button">Connect</button></td>
                            </tr>
                        }

                    </tbody>
                </table>
            }
            else
            {
                <p>No devices got yet</p>
            }

        </div>


        <EditForm OnValidSubmit="RequestDevice" Model="DeviceFilter">

            <div class="form-group">
                <label>
                    Allow all devices:
                </label>
                <InputCheckbox class="form-control" @bind-Value="DeviceFilter.AllowAllDevices" />
            </div>

            @if (!DeviceFilter.AllowAllDevices)
            {
                <div>
                    <div class="form-group">
                        <label>
                            Device name:
                        </label>
                        <InputText class="form-control" @bind-Value="DeviceFilter.DeviceName" />
                    </div>

                    <div class="form-group">
                        <label>
                            Device name prefix:
                        </label>
                        <InputText class="form-control" @bind-Value="DeviceFilter.DeviceNamePrefix" />
                    </div>

                    <div class="form-group">
                        <label>
                            Service UUID:
                        </label>
                        <InputText class="form-control" @bind-Value="DeviceFilter.ServiceUuid" />
                    </div>
                </div>
            }

            <div class="form-group">
                <button class="btn btn-primary" disabled="@IsBusy" type="submit">Request device</button>
            </div>

        </EditForm>
    }

    @if (CurrentDevice != null)
    {
        @if (!AdvertisementsReceiveActivated)
        {
            <div class="form-group">
                <button type="button" @onclick="StartReceivingAdvertisements">Start watching advertisements</button>
            </div>
        }


        <div class="form-group">
            <div class="border border-success">
                <div class="form-group">
                    <label>
                        <b>Device name:</b> @CurrentDevice.Name
                    </label>
                </div>
                <div class="form-group">
                    <label>
                        <b>Device id:</b> @CurrentDevice.Id
                    </label>
                </div>
                <div class="form-group">
                    <label>
                        <b>Is device connected:</b> @CurrentDevice.Gatt.Connected
                    </label>
                </div>

                <div class="form-group">
                    <button class="btn btn-outline-secondary" disabled="@IsBusy" @onclick="UpdateIsConnected">Update Connected state</button>
                </div>

                @if (CurrentDevice.Gatt.Connected)
                {
                    <div class="form-group">
                        <button class="btn btn-danger" disabled="@IsBusy" type="button" @onclick="DisconnectDevice">Disconnect the device</button>
                    </div>
                }
                else
                {
                    <div class="form-group">
                        <button class="btn btn-primary" disabled="@IsBusy" type="button" @onclick="() => ConnectDevice(CurrentDevice)">Connect the device</button>
                    </div>
                }
            </div>
        </div>
    }


    <div class="border border-warning">
        @foreach (var item in Logs)
        {
            <label>
                @item
            </label>
            <br />
        }
    </div>
</div>

@code {

    [Inject]
    public IBluetoothNavigator BluetoothNavigator { get; set; }

    public List<IDevice> RequestedDevices { get; set; } = new List<IDevice>();

    public List<IDevice> GotDevices { get; set; } = new List<IDevice>();

    public DeviceFilter DeviceFilter { get; set; } = new DeviceFilter();

    private IDevice _currentdevice;
    public IDevice CurrentDevice
    {
        get => _currentdevice;
        set => SetProperty(ref _currentdevice, value);
    }

    private bool _isBusy;
    public bool IsBusy
    {
        get => _isBusy;
        set => SetProperty(ref _isBusy, value);
    }

    private bool _advertisementsFeatureDissabled;
    public bool AdvertisementsFeatureDissabled
    {
        get => _advertisementsFeatureDissabled;
        set => SetProperty(ref _advertisementsFeatureDissabled, value);
    }

    private IBluetoothAdvertisingEvent _bluetoothAdvertisingEvent;
    public IBluetoothAdvertisingEvent BluetoothAdvertisingEvent
    {
        get => _bluetoothAdvertisingEvent;
        set => SetProperty(ref _bluetoothAdvertisingEvent, value);
    }

    private bool _advertisementsReceiveActivated;
    public bool AdvertisementsReceiveActivated
    {
        get => _advertisementsReceiveActivated;
        set => SetProperty(ref _advertisementsReceiveActivated, value);
    }

    public ObservableCollection<string> Logs { get; set; } = new ObservableCollection<string>
        {
            "Logs:"
        };

    public async Task RequestDevice()
    {
        IsBusy = true;
        AdvertisementsReceiveActivated = false;
        BluetoothAdvertisingEvent = null;

        try
        {
            var isBleAvailable = await BluetoothNavigator.GetAvailability();
            if (!isBleAvailable)
            {
                Logs.Add($"The BLE is not available on your browser");
            }

            CurrentDevice = null;

            var query = new RequestDeviceQuery { AcceptAllDevices = DeviceFilter.AllowAllDevices };

            if (!DeviceFilter.AllowAllDevices)
            {
                query.Filters = new List<Filter>
                    {
                        new Filter
                        {
                            Name = string.IsNullOrWhiteSpace(DeviceFilter.DeviceName)
                                ? null
                                : DeviceFilter.DeviceName,
                            NamePrefix = string.IsNullOrWhiteSpace(DeviceFilter.DeviceNamePrefix)
                                ? null
                                : DeviceFilter.DeviceNamePrefix,
                        }
                    };
            }

            if (!string.IsNullOrEmpty(DeviceFilter.ServiceUuid))
            {
                query.OptionalServices.Add(DeviceFilter.ServiceUuid);
            }

            CurrentDevice = await BluetoothNavigator.RequestDevice(query);

            if (RequestedDevices.Any(x => x.Id != CurrentDevice.Id))
            {
                RequestedDevices.Add(CurrentDevice);
            }
        }
        catch (System.Exception ex)
        {
            Logs.Add($"Exception: {ex.Message}");
        }

        IsBusy = false;
    }

    private void Device_OnAdvertisementReceived(IBluetoothAdvertisingEvent bluetoothAdvertisingEvent)
    {
        BluetoothAdvertisingEvent = bluetoothAdvertisingEvent;
        CurrentDevice.OnAdvertisementReceived -= Device_OnAdvertisementReceived;
    }

    public async Task ConnectDevice(IDevice device)
    {
        IsBusy = true;
        AdvertisementsReceiveActivated = false;
        BluetoothAdvertisingEvent = null;

        try
        {
            await device.Gatt.Connect();

            CurrentDevice = device;
            StateHasChanged();
        }
        catch (System.Exception ex)
        {
            Logs.Add($"Exception: {ex.Message}");
        }

        IsBusy = false;
    }

    public async Task DisconnectDevice()
    {
        IsBusy = true;
        AdvertisementsReceiveActivated = false;
        BluetoothAdvertisingEvent = null;

        try
        {
            await CurrentDevice.Gatt.Disonnect();
            StateHasChanged();
        }
        catch (System.Exception ex)
        {
            Logs.Add($"Exception: {ex.Message}");
        }

        if (!await CurrentDevice.Gatt.GetConnected())
        {
            CurrentDevice = null;
        }

        IsBusy = false;
    }

    public async Task UpdateIsConnected()
    {
        IsBusy = true;

        try
        {
            await CurrentDevice.Gatt.GetConnected();
            StateHasChanged();
        }
        catch (System.Exception ex)
        {
            Logs.Add($"Exception: {ex.Message}");
        }

        IsBusy = false;
    }

    public async Task OnGetDeviceClicked()
    {
        try
        {
            GotDevices.Clear();
            var devices = await BluetoothNavigator.GetDevices();
            if (devices != null)
            {
                GotDevices.AddRange(devices);
            }
        }
        catch (System.Exception ex)
        {
            Logs.Add($"Exception: {ex.Message}");
        }
    }

    public bool? IsAvailable { get; set; }

    public async Task OnGetAvailabilityClicked()
    {
        try
        {
            IsAvailable = null;
            Logs.Add($"Subscribing to OnAvailabilityChanged event");
            BluetoothNavigator.OnAvailabilityChanged -= BluetoothNavigator_OnAvailabilityChanged;
            BluetoothNavigator.OnAvailabilityChanged += BluetoothNavigator_OnAvailabilityChanged;
            IsAvailable = await BluetoothNavigator.GetAvailability();
        }
        catch (System.Exception ex)
        {
            Logs.Add($"Exception: {ex.Message}");
        }
    }

    private void BluetoothNavigator_OnAvailabilityChanged()
    {
        Logs.Add($"BluetoothNavigator_OnAvailabilityChanged called");
    }

    private async Task StartReceivingAdvertisements()
    {
        try
        {
            CurrentDevice.OnAdvertisementReceived += Device_OnAdvertisementReceived;
            await CurrentDevice.WatchAdvertisements();
            AdvertisementsReceiveActivated = true;
        }
        catch (AdvertisementsUnavailableException ex)
        {
            AdvertisementsFeatureDissabled = true;
            Logs.Add($"AdvertisementsUnavailableException: {ex.Message}");
        }
    }
    protected bool SetProperty<T>(ref T property, T value, [CallerMemberName] string propertyName = "")
    {
        if (!EqualityComparer<T>.Default.Equals(property, value))
        {
            property = value;
            StateHasChanged();
            return true;
        }

        return false;
    }
}